<?xml version="1.0" encoding="UTF-8"?>
<project default="full-build" name="Jenkins With Public Repo">
	<!-- By default, we assume all tools to be on the $PATH -->
	<property name="pdepend" value="pdepend"/>
	<property name="phpcpd" value="phpcpd"/>
	<property name="phpcs" value="phpcs"/>
	<property name="phpdox" value="phpdox"/>
	<property name="phploc" value="phploc"/>
	<property name="phpmd" value="phpmd"/>
	<property name="phpunit" value="phpunit"/>
		<!-- Use this when the tools are located as PHARs in ${basedir}/build/tools <property name="pdepend" value="${basedir}/build/tools/pdepend.phar"/> <property name="phpcpd" value="${basedir}/build/tools/phpcpd.phar"/> <property name="phpcs" value="${basedir}/build/tools/phpcs.phar"/> <property name="phpdox" value="${basedir}/build/tools/phpdox.phar"/> <property name="phploc" value="${basedir}/build/tools/phploc.phar"/> <property name="phpmd" value="${basedir}/build/tools/phpmd.phar"/> <property name="phpunit" value="${basedir}/build/tools/phpunit.phar"/> -->
		<!-- Use this when the tools are managed by Composer in ${basedir}/vendor/bin <property name="pdepend" value="${basedir}/vendor/bin/pdepend"/> <property name="phpcpd" value="${basedir}/vendor/bin/phpcpd"/> <property name="phpcs" value="${basedir}/vendor/bin/phpcs"/> <property name="phpdox" value="${basedir}/vendor/bin/phpdox"/> <property name="phploc" value="${basedir}/vendor/bin/phploc"/> <property name="phpmd" value="${basedir}/vendor/bin/phpmd"/> <property name="phpunit" value="${basedir}/vendor/bin/phpunit"/> -->
	<target description="Performs static analysis, runs the tests, and generates project documentation" name="full-build" depends="prepare,static-analysis,phpunit,phpdox,-check-failure"/>
	<target description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation" name="full-build-parallel" depends="prepare,static-analysis-parallel,phpunit,phpdox,-check-failure"/>
	<target description="Performs a lint check and runs the tests (without generating code coverage reports)" name="quick-build" depends="prepare,lint,phpunit-no-coverage"/>
	<target description="Performs static analysis" name="static-analysis" depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci"/>
		<!-- Adjust the threadCount attribute's value to the number of CPUs -->
	<target description="Performs static analysis (executing the tools in parallel)" name="static-analysis-parallel">
		<parallel threadCount="2">
			<sequential>
				<antcall target="pdepend"/>
				<antcall target="phpmd-ci"/>
			</sequential>
			<antcall target="lint"/>
			<antcall target="phpcpd-ci"/>
			<antcall target="phpcs-ci"/>
			<antcall target="phploc-ci"/>
		</parallel>
	</target>
	<target description="Cleanup build artifacts" name="clean" unless="clean.done">
		<delete dir="${basedir}/build/api"/>
		<delete dir="${basedir}/build/coverage"/>
		<delete dir="${basedir}/build/logs"/>
		<delete dir="${basedir}/build/pdepend"/>
		<delete dir="${basedir}/build/phpdox"/>
		<property name="clean.done" value="true"/>
	</target>
	<target description="Prepare for build" name="prepare" depends="clean" unless="prepare.done">
		<mkdir dir="${basedir}/build/api"/>
		<mkdir dir="${basedir}/build/coverage"/>
		<mkdir dir="${basedir}/build/logs"/>
		<mkdir dir="${basedir}/build/pdepend"/>
		<mkdir dir="${basedir}/build/phpdox"/>
		<property name="prepare.done" value="true"/>
	</target>
	<target description="Perform syntax check of sourcecode files" name="lint" unless="lint.done">
		<apply taskname="lint" executable="php">
			<arg value="-l"/>
			<fileset dir="${basedir}/src">
				<include name="**/*.php"/>
				<modified/>
			</fileset>
			<fileset dir="${basedir}/tests">
				<include name="**/*.php"/>
				<modified/>
			</fileset>
		</apply>
		<property name="lint.done" value="true"/>
	</target>
	<target description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line." name="phploc" unless="phploc.done">
		<exec taskname="phploc" executable="${phploc}">
			<arg value="--count-tests"/>
			<arg path="${basedir}/src"/>
			<arg path="${basedir}/tests"/>
		</exec>
		<property name="phploc.done" value="true"/>
	</target>
	<target description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment." name="phploc-ci" depends="prepare" unless="phploc.done">
		<exec taskname="phploc" executable="${phploc}">
			<arg value="--count-tests"/>
			<arg value="--log-csv"/>
			<arg path="${basedir}/build/logs/phploc.csv"/>
			<arg value="--log-xml"/>
			<arg path="${basedir}/build/logs/phploc.xml"/>
			<arg path="${basedir}/src"/>
			<arg path="${basedir}/tests"/>
		</exec>
		<property name="phploc.done" value="true"/>
	</target>
	<target description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment." name="pdepend" depends="prepare" unless="pdepend.done">
		<exec taskname="pdepend" executable="${pdepend}">
			<arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml"/>
			<arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg"/>
			<arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg"/>
			<arg path="${basedir}/src"/>
		</exec>
		<property name="pdepend.done" value="true"/>
	</target>
	<target description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing." name="phpmd" unless="phpmd.done">
		<exec taskname="phpmd" executable="${phpmd}">
			<arg path="${basedir}/src"/>
			<arg value="text"/>
			<arg path="${basedir}/build/phpmd.xml"/>
		</exec>
		<property name="phpmd.done" value="true"/>
	</target>
	<target description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment." name="phpmd-ci" depends="prepare" unless="phpmd.done">
		<exec taskname="phpmd" executable="${phpmd}">
			<arg path="${basedir}/src"/>
			<arg value="xml"/>
			<arg path="${basedir}/build/phpmd.xml"/>
			<arg value="--reportfile"/>
			<arg path="${basedir}/build/logs/pmd.xml"/>
		</exec>
		<property name="phpmd.done" value="true"/>
	</target>
	<target description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing." name="phpcs" unless="phpcs.done">
		<exec taskname="phpcs" executable="${phpcs}">
			<arg value="--standard=PSR2"/>
			<arg value="--extensions=php"/>
			<arg value="--ignore=autoload.php"/>
			<arg path="${basedir}/src"/>
			<arg path="${basedir}/tests"/>
		</exec>
		<property name="phpcs.done" value="true"/>
	</target>
	<target description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment." name="phpcs-ci" depends="prepare" unless="phpcs.done">
		<exec taskname="phpcs" executable="${phpcs}" output="/dev/null">
			<arg value="--report=checkstyle"/>
			<arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
			<arg value="--standard=PSR2"/>
			<arg value="--extensions=php"/>
			<arg value="--ignore=autoload.php"/>
			<arg path="${basedir}/src"/>
			<arg path="${basedir}/tests"/>
		</exec>
		<property name="phpcs.done" value="true"/>
	</target>
	<target description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing." name="phpcpd" unless="phpcpd.done">
		<exec taskname="phpcpd" executable="${phpcpd}">
			<arg path="${basedir}/src"/>
		</exec>
		<property name="phpcpd.done" value="true"/>
	</target>
	<target description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment." name="phpcpd-ci" depends="prepare" unless="phpcpd.done">
		<exec taskname="phpcpd" executable="${phpcpd}">
			<arg value="--log-pmd"/>
			<arg path="${basedir}/build/logs/pmd-cpd.xml"/>
			<arg path="${basedir}/src"/>
		</exec>
		<property name="phpcpd.done" value="true"/>
	</target>
	<target description="Run unit tests with PHPUnit" name="phpunit" depends="prepare" unless="phpunit.done">
		<exec taskname="phpunit" executable="${phpunit}" resultproperty="result.phpunit">
			<arg value="--configuration"/>
			<arg path="${basedir}/build/phpunit.xml"/>
		</exec>
		<property name="phpunit.done" value="true"/>
	</target>
	<target description="Run unit tests with PHPUnit (without generating code coverage reports)" name="phpunit-no-coverage" depends="prepare" unless="phpunit.done">
		<exec taskname="phpunit" executable="${phpunit}" failonerror="true">
			<arg value="--configuration"/>
			<arg path="${basedir}/build/phpunit.xml"/>
			<arg value="--no-coverage"/>
		</exec>
		<property name="phpunit.done" value="true"/>
	</target>
	<target description="Generate project documentation using phpDox" name="phpdox" depends="phploc-ci,phpcs-ci,phpmd-ci" unless="phpdox.done">
		<exec dir="${basedir}/build" taskname="phpdox" executable="${phpdox}"/>
		<property name="phpdox.done" value="true"/>
	</target>
	<target name="-check-failure">
		<fail message="PHPUnit did not finish successfully">
			<condition>
				<not>
					<equals arg2="0" arg1="${result.phpunit}"/>
				</not>
			</condition>
		</fail>
	</target>
</project>